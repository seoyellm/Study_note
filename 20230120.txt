```sql
1.부서별 사원수 ,최대급여출력
SELECT DEPTNO, COUNT(EMPNO), MAX(SAL)
FROM EMP
GROUP BY DEPTNO;

2.부서별 평균 급여, 평균급여 3000 이상
SELECT DEPTNO, AVG(SAL)
FROM EMP
GROUP BY DEPTNO
HAVING AVG(SAL)>=3000;

3.사원번호, 사원명, 매니저번호, 매니저명 출력
SELECT E.EMPNO, E.ENAME, E.MGR AS MGRNO, M.ENAME AS MGRNAME
FROM EMP E , EMP M
WHERE E.MGR(+)=M.EMPNO;

4.부서번호, 부서명, 사원번호, 사원명 출력
(단, 부서에 사원이 없더라도 출력
정렬기준: 부서번호, 사원번호)
SELECT E.EMPNO,E.ENAME, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO(+)=D.DEPTNO

ORDER BY D.DEPTNO, E.EMPNO;
====================================================================================================================================

<LESSON 6 서브쿼리>
--원본 쿼리 안에 들어있는 쿼리
--어디든 사용가능(SELECT, FROM , WHERE)
--중첩 무한으로 가능
--내부 -> 바깥 방향으로 해석
--서브 쿼리에서는 ORDER BY 할 필요 없음

--CLARK의 급여
SELECT ENAME,SAL 
FROM EMP
WHERE ENAME='CLARK';

--2450보다 급여 많이 받는 사원
SELECT *
FROM EMP
WHERE SAL>2450;

--CLERK의 보다 급여를 많이 받는 사원 출력
--(2450)보다 많은 급여를 받는 사원 출력
--(CLERK 급여)보다 많은 급여를 받느 사원 출력
SELECT * 
FROM EMP

WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME='CLARK');
--================================================================================================

--VIEW
--  SQL을 저장하고 있는 테이블
--  가상 테이블(VIRTUAL TABLE) -->메모리를 차지하지 않음, 실제 데이터를 가지는 것이 아님
CREATE VIEW TEST_VIEW AS(
SELECT ENAME, SAL FROM EMP WHERE DEPTNO=10
);

SELECT * FROM TEST_VIEW

WHERE ENAME='CLARK';
--==================================================================================================

--인라인뷰(INLINE VIEW)
--FROM 절에 사용하는 서브쿼리
--효율적 : JOIN 시 연산 양이 줄음, 원본 쿼리의 WHERE에 AS 사용 가능 -->메모리에 효율적, 유지보수관리 쉬움
SELECT *
FROM(SELECT ENAME, SAL FROM EMP WHERE DEPTNO=10)  -->임시성 테이블

WHERE SAL < 3000;
--====================================================================================================

SELECT * FROM EMP
WHERE SAL < 3000 AND DEPTNO=10;

SELECT *
FROM(
    SELECT ENAME, SAL*12 AS ASAL
    FROM EMP
    WHERE DEPTNO=10
    ) T1, EMP E
WHERE T1=E.ID AND ASAL > 2000 -->원본 쿼리의 WHERE에 AS 사용 가능
ORDER BY ENAME DESC;

SELECT T10.ENAME, T20.DEPTNO
FROM
    (SELECT * FROM EMP WHERE DEPTNO=10) T10,  --> JOIN 시 연산 양이 줄음
    (SELECT * FROM EMP WHERE DEPTNO=20) T20
;    

--사원번호 7369인 사원의 사원명,    (클럭급여를 출력)
SELECT SAL FROM EMP WHERE ENAME='CLARK';

SELECT EMPNO, ENAME,(SELECT SAL FROM EMP WHERE ENAME='CLARK') AS CSAL
FROM EMP
WHERE EMPNO=7369;

--사원번호가 7654 인 사원의 직업과 같고 사원번호가 7900인 사원보다 급여를 많이 받는 사원
SELECT JOB FROM EMP
WHERE EMPNO=7654; -->SALARYMAN

SELECT SAL FROM EMP
WHERE EMPNO=7900; -->950

SELECT * FROM EMP
WHERE JOB = 'SALARYMAN'
AND SAL > 950;

SELECT * FROM EMP
WHERE JOB = (SELECT JOB FROM EMP WHERE EMPNO=7654) 
AND SAL > (SELECT SAL FROM EMP WHERE EMPNO=7900);

--평균 급여보다 많이 받는 사원정보 출력
SELECT * FROM EMP

WHERE SAL>(SELECT AVG(SAL) FROM EMP);
--============================================================================================

--HAVING절의 서브쿼리
--20번 부서의 최소급여
SELECT MIN(SAL)
FROM EMP
WHERE DEPTNO=20;

--부서별 최소 급여 출력
SELECT DEPTNO,MIN(SAL)
FROM EMP
GROUP BY DEPTNO;

--최소급여가 800보다 크다
SELECT DEPTNO,MIN(SAL)
FROM EMP
GROUP BY DEPTNO
HAVING MIN(SAL)>800;

--각 부서별 최소 급여 츨력, 단,20번 (부서의 최소급여) 보다 큰 급여 출력
SELECT DEPTNO,MIN(SAL)
FROM EMP
GROUP BY DEPTNO

HAVING MIN(SAL)>(SELECT MIN(SAL)FROM EMP WHERE DEPTNO=20);
--==============================================================================================

--'=' 뒤에 값은 하나만 와야 함 --> 여러개의 값을 사용해야할 경우 IN, ANY, ALL
--ANY(): ()값 중에서 하나 보다 ~, 하나의 조건만 만족해도 된다. -->각 값보다 작은/큰 값
--ALL(): 모든()값 보다 ~, 모든 조건 만족해라 --> 최대, 최소 값
-- ===========================================================
-- ANY / ALL : 서브쿼리 결과가 Multi row인 경우
-- ===========================================================
SELECT * FROM DEPT WHERE DEPTNO IN (10,20);
-- 부서 테이블에서 부서번호가 30미만인 부서정보 출력

-- 서브쿼리 결과가 여러건(multi row)인 경우
--800
--1100
--950
--1300
select empno, ename, job, sal 
from emp
where sal < ANY (select sal from emp where job = 'CLERK')
    and job <> 'CLERK';

-- ===========================================================
--1250
--1250
--1500
--1600    

SELECT EMPNO, ENAME, JOB, SAL
FROM EMP
WHERE SAL < ANY(SELECT SAL FROM EMP WHERE JOB ='SALESMAN')
    AND JOB <> 'SALESMAN';

-- ===========================================================
1566.666666666666666666666666666666666667
2175
2916.666666666666666666666666666666666667

SELECT EMPNO, ENAME, JOB FROM EMP
WHERE SAL > ALL(SELECT AVG(SAL) FROM EMP GROUP BY DEPTNO);
    
SELECT EMPNO, ENAME, JOB FROM EMP
WHERE SAL > (SELECT MAX(AVG(SAL)) FROM EMP GROUP BY DEPTNO) ;
            
--=================================================================================================
--<실습>
--17. 'JONES'가 속해있는 부서의 모든사람의 사원번호, 이름, 입사일, 급여를 출력하라.
SELECT EMPNO, ENAME, HIREDATE, SAL
FROM EMP
WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='JONES');

--1.DALLAS에서 근무하는 사원의 이름, 직업, 부서번호, 부서이름을 출력하라.
SELECT E.ENAME, E.JOB,D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO=D.DEPTNO AND E.DEPTNO=(SELECT DEPTNO FROM DEPT
WHERE LOC='DALLAS');

SELECT E.ENAME, E.JOB,D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO=D.DEPTNO AND LOC='DALLAS';


SELECT E.ENAME, E.JOB, D.DEPTNO,D.DNAME
FROM EMP E, (SELECT * FROM DEPT WHERE LOC='DALLAS') D
WHERE E.DEPTNO=D.DEPTNO;

SELECT E.ENAME, E.JOB, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO=D.DEPTNO AND
    LOC=ANY( SELECT LOC FROM EMP E, DEPT D WHERE E.DEPTNO = D. DEPTNO AND D.LOC='DALLAS');
    
--5.사원번호가 7499인 사원의 직업, 부서번호와 일치하는 사원의 정보를 출력하라.
SELECT E.*
FROM EMP E, (SELECT JOB, DEPTNO FROM EMP WHERE EMPNO = 7499) I
WHERE E.JOB = I.JOB AND E.DEPTNO = I.DEPTNO;

SELECT *
FROM EMP
WHERE JOB = (SELECT JOB FROM EMP WHERE EMPNO = 7499) --SALESMAN
    AND DEPTNO = (SELECT DEPTNO FROM EMP WHERE EMPNO = 7499); --30

--MULTIPLE-COLUMN SUBQUERY
SELECT *
FROM EMP
WHERE (JOB,DEPTNO) = (SELECT JOB,DEPTNO FROM EMP WHERE EMPNO = 7499) ;

--6.10번 부서의 사원들과 같은 월급을 받는 사원들의 이름, 월급, 부서번호를 출력하라.
SELECT ENAME, SAL, DEPTNO
FROM EMP
WHERE SAL IN (SELECT SAL FROM EMP WHERE DEPTNO=10); -->=ANY도 가능(=ANY = IN)

--8.커미션을 받는 사원과 부서번호, 월급이 같은 사원의 이름, 월급, 부서번호를 출력하라.
SELECT ENAME, SAL, DEPTNO
FROM EMP
WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, SAL FROM EMP WHERE NVL(COMM,0) !=0);

--9.MGR가 'KING‘인 모든 사원의 이름과 급여를 출력하라.
--1)
SELECT ENAME,SAL
FROM EMP
WHERE ENAME IN (SELECT E.ENAME FROM EMP E, EMP M WHERE E.MGR=M.EMPNO AND M.ENAME = 'KING'); 
--2)
SELECT ENAME, SAL FROM EMP
WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='KING');

--18. 10번 부서의 사람들중에서 20번 부서의 사원과 같은 업무를 하는 사원의 사원번호, 이름, 부서명, 입사일, 지역을 출력하라.
SELECT  E.EMPNO, E.ENAME, E.HIREDATE, D.DNAME, D.LOC
FROM EMP E, DEPT D 
WHERE E.DEPTNO=D.DEPTNO 
    AND D.DEPTNO=10 
    AND JOB IN(SELECT DISTINCT JOB FROM EMP WHERE DEPTNO=20);

--22. 'MARTIN'이나 'SCOTT'의 급여와 같은 사원의 사원번호, 이름, 급여를 출력하라.
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL IN(SELECT SAL FROM EMP WHERE ENAME IN('MARTIN','SCOTT'));

==========================================================================================================================
--CASE TOOL :자동화 도구  EX.SQL DVELOPER
--CASE / DECODE
--1)CASE ~(WHEN-THEN...ELSE) ~END :범위, 그리고, 또는 조건이 붙을 때 사용
SELECT ename
     , deptno
     , CASE WHEN WHERE 단어빼고 조건 THEN 출력값 
            WHEN WHERE 단어빼고 조건 THEN 출력값   
            ELSE 출력값
       END AS 컬럼별칭
FROM 테이블이름;      

SELECT ename
     , deptno
     , CASE WHEN deptno = '10' THEN 'New York' -->WHERE 조건에 들어가는 조건 기입
            WHEN deptno = '20' THEN 'Dallas'   -->DEPTNO가 20번이면 DALLAS라고 출력
            ELSE 'Unknown'
       END AS loc_name
  FROM emp
 WHERE job = 'MANAGER'


--2)DECODE : 하나의 값을 비교할 때 편리 , ~이상 ~이하 불가
select decode(컬럼이름A, 비교대상값B, 출력값X, 출력값Y), ... 
from 테이블이름;

SELECT DEPTNO,DECODE(DEPTNO, 10, '십번',  '그외') 
FROM DEPT;

SELECT DEPTNO,DECODE(DEPTNO, 10, '십번', 20, '이십번', '그외') AS CCC
FROM DEPT;

--직업이 MANAMER 이면 SAL+(SAL * 0.1)
--직업이 SALSEMAN 이면 SAL+(SAL * 0.5)
--그외 동결 SAL
SELECT JOB,SAL,DECODE(JOB, 'MANAGER', SAL+(SAL*0.1), 'SALESMAN',SAL+(SAL*0.5),SAL) AS SSAL
FROM EMP
ORDER BY JOB;

--CASE문으로
select job, sal, 
            case when job = 'MANAGER' then sal + (sal*0.1)
                    when job = 'SALESMAN' then sal + (sal*0.5)
            else sal
            end as s
from emp
order by job;

--급여가 1000이상 2000미만이면 1
--급여가 2000이상 3000미만이면 2
--그외 3
SELECT SAL,
        CASE WHEN SAL >=1000 AND SAL <2000 THEN 1
            WHEN SAL >=2000 AND SAL <3000 THEN 2
            ELSE 3
        END AS GRADE
FROM EMP
ORDER BY SAL;

--UNION / UNION ALL
--UNION : 중복 제거 후 테이블 합체
--UNION ALL : 중복 제거하지 않고 테이블 합체
--데이터 타입과 개수를 맞춰야 함
(SELECT DEPTNO,EMPNO, ENAME, SAL FROM EMP WHERE DEPTNO =10)
UNION
(SELECT DEPTNO,EMPNO, ENAME, SAL FROM EMP WHERE DEPTNO =20);

(SELECT DEPTNO,EMPNO, ENAME, SAL FROM EMP )
UNION ALL
(SELECT DEPTNO,EMPNO, '100', SAL FROM EMP );



--D10   D20   D30

----- ----- ------

-- 5     4     5

SELECT DEPTNO,COUNT(EMPNO) 
FROM EMP
GROUP BY DEPTNO;

SELECT
    (SELECT COUNT(EMPNO) FROM EMP WHERE DEPTNO =10) AS D10,
    (SELECT COUNT(EMPNO) FROM EMP WHERE DEPTNO =20) AS D20,
    (SELECT COUNT(EMPNO) FROM EMP WHERE DEPTNO =30) AS D30
FROM DUAL;    


```

